// Code generated by mockery v1.0.0
package mocks

import context "context"
import http "net/http"
import mock "github.com/stretchr/testify/mock"

// RequestManger is an autogenerated mock type for the RequestManger type
type RequestManger struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, url
func (_m *RequestManger) Get(ctx context.Context, url string) (*http.Response, string, error) {
	ret := _m.Called(ctx, url)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string) *http.Response); ok {
		r0 = rf(ctx, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, url)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Post provides a mock function with given fields: ctx, url, data
func (_m *RequestManger) Post(ctx context.Context, url string, data interface{}) (*http.Response, string, error) {
	ret := _m.Called(ctx, url, data)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *http.Response); ok {
		r0 = rf(ctx, url, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) string); ok {
		r1 = rf(ctx, url, data)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, interface{}) error); ok {
		r2 = rf(ctx, url, data)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
